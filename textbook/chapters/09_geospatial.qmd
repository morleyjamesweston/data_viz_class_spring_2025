# Maps & geospatial data

```{r}
library(tidyverse)
library(sf)
library(ggspatial)
library(rnaturalearth)
library(wbstats)
library(maps)
```

Geodata can be a real pain to deal with, but if you just want some basic country data, you can use the rnaturalearth package.

This package has a few functions that allow you to download geodata from the Natural Earth database, which is often my first choice.

```{r}
library(rnaturalearth)
africa <- ne_countries(scale = 10, continent = "africa")
```

The `sf` (Simple Features) package includes a lot of functions to make maps, one of which is the `geom_sf()` function, which allows you to plot geographic data as a simple map.

```{r}
africa |>
  ggplot() +
  geom_sf()
```

Just like any other kind of data frame, you can use the `aes()` function to map variables to aesthetics. Here, I’m mapping the `pop_est` column to the fill color of the map. This is the estimated population of each country, and is a column in the `africa` data frame.

```{r}
africa |>
  ggplot(aes(fill = pop_est)) +
  geom_sf()
```

Just like with any other plot, I can use the `lims()` function to set the limits of the plot. In this case, it’s the longitude and latitude in degrees.

earth.google.com is a good place to find these, the longitude and latitude will show up in the lower right corner.

It’s easy to get mixed up about Longitude and Latitude and X and Y.

Remember that **Lats lay Flat**

And that **Y has 3 lines, lat has 3 letters**

And that **Long has the long lines**

Here, I’ve zoomed in a bit on west Africa.

```{r}
africa |>
  ggplot(aes(fill = pop_est)) +
  geom_sf() +
  lims(x = c(-20, 30), y = c(0, 40))
```

My African geography could use some work, so I’ll also add some labels to the map.

We do this by adding a `geom_sf_label()` layer to the plot, as well as a `label=` aesthetic to the `aes()` call.

```{r}
africa |>
  ggplot(aes(fill = pop_est, label = name)) +
  geom_sf() +
  coord_sf(xlim = c(-15, 50), ylim = c(-35, 40)) +
  geom_sf_label()
```

This is, however, a little crowded, so we can first make a new column to only include the most populous countries, those over 30 million (3e7) inhabitants.

We here use `case_when()` to create a new column, `label_name`, which is the name of the country if the population is over 30 million, and `NA` otherwise.

```{r}
africa |> mutate(
  label_name = case_when(
    pop_est > 3e7 ~ name, # if pop_est > 3e7, make it the same as the name column 
    .default = NA  # If none of the conditions are true, use this one
  )
)
```

```{r}
africa <- africa |> mutate(
  label_name = case_when(
    pop_est > 3e7 ~ name,
    .default = NA
  )
) 

africa |> 
  ggplot(aes(fill = pop_est, label = label_name)) +
  geom_sf() +
  coord_sf(xlim = c(-15, 50), ylim = c(-35, 40)) +
  geom_sf_label()
```

With a little messing around, we can get a decent looking map. Remember that for scale and stuff, you should look at the final output, not the little map preview in RStudio.

TODO: Explain

```{r}
options(scipen = 999)
```

```{r}
africa |>
  ggplot(aes(fill = pop_est, label = label_name)) +
  geom_sf() +
  coord_sf(xlim = c(-15, 50), ylim = c(-35, 40)) +
  geom_sf_label(fill = "#eeeeee") +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.key.width = unit(3, "cm")
  ) +
  labs(fill="Population") |> 
  scale_fill_viridis_c(option = "A")
```

This will save the final output. Be sure to look here when you’re making your maps.

```{r}
#| eval=FALSE
ggsave("afrimap.png", width = 20, height = 25, unit="cm", dpi=300)
```

![](images/maps/afrimap.png)

## Classwork: Make a map

```{r}
myanmar <- ne_states(country = "Myanmar", returnclass = "sf")
```

TODO: Include final output

## Getting country data the more complicated way

The more complicated way to get geodata is to download it from a website like naturalearthdata.com, and then load it into R.

This is a bit more complicated, but it gives you a bit more data than the R version.

TODO: explain shapefile folder

```{r}
download.file("https://naciscdn.org/naturalearth/10m/cultural/ne_10m_admin_0_countries.zip", "input_data/ne_countries.zip")
unzip("input_data/ne_countries.zip", exdir = "input_data/ne_countries")

world_from_file <- st_read("input_data/ne_countries/ne_10m_admin_0_countries.shp")
```

Why do this? there’s one incredibly important reason.

## Cartography can get you in a lot of trouble

Wherever you publish your data, you have to be aware that you have to be very careful about the maps you present; many countries are very touchy about this.

This can apply to your own country, too, and can get you in some deep trouble. Wherever you publish, you’ll have to consider:

1.  The laws of the country you’re in
2.  The laws of the country you’re publishing in
3.  The laws of the country you’re from
4.  Your own politics and viewpoints

This can be a real headache, and if you’re from a sensitive country, you might not want to publish maps at all.

If you want to open this can of worms, naturalearthdata.com has geodata from each country’s point of view.

![](images/maps/country_pov.png)

You might have to do some wrangling with some other data, as well. For example, the World Bank and IMF don’t publish data on Taiwan, the UN lists it as either “Taiwan, Province of China” or “Other Asian Area”.

## Map projections

Africa looked alright, but let’s make a map of Europe.

```{r}
europe <- ne_countries(scale = 10, continent = "europe", returnclass = "sf")

europe |>
  ggplot(aes(fill=economy)) +
  geom_sf() +
  lims(x = c(-10, 40), y = c(35, 70)) +
  theme_minimal()
```

What are some things we notice here? One subtle one that stands out to me is that France is a lot longer and thinner than it should be.

This is because of our map projection. The default projection in ggplot2 is the Mercator projection, which is great for navigation, but not so great for area.

We can change this by using the `coord_sf()` function, which allows us to change the projection of the map. I’ll do these on a world map so that you can more easily see the difference.

In the `coord_sf()` function, we can specify the projection we want to use. For example, the Robinson projection is a compromise projection that tries to balance area and shape distortion.

You can find a list of different projections [here](https://proj.org/en/9.5/operations/projections/index.html).

```{r}
world <- ne_countries(scale = 10, returnclass = "sf")

world |>
  ggplot(aes(fill=economy)) +
  geom_sf() +
  coord_sf(crs = "+proj=robin") +
  theme_minimal()
```

You can get really fancy with this if you want to. Here’s the world centered on Switzerland.

A good tool for this is [projectionwizard.org](https://projectionwizard.org), which allows you to play around with different projections in your browser.

```{r}
world |>
  ggplot() +
  geom_sf() +
  coord_sf(crs = "+proj=laea +y_0=47 +lon_0=8 +lat_0=47") +
  theme_minimal()
```

## Adding data to maps

One thing that will trip you up is that every country has a lot of names. I might say I’m from:

1.  The US
2.  The United States
3.  The United States of America
4.  America
5.  The States
6.  The US of A
7.  The USA
8.  USA
9.  Etc. etc. etc.

Naturalearthdata has a lot of different names for each country, and you’ll have to pick the right one to match to your other data.

```{r}
world |> 
  as_tibble() |> 
  select(name, name_long, formal_en, name_ciawf, fips_10, iso_a2, iso_a3, wb_a2, wb_a3)
```

If you’re working with local data, you might want to download the full data \*set from naturalearthdata.com, which has a lot more fields.

```{r}
world_from_file |> 
  as_tibble() |> 
  select(NAME_ZHT, NAME_RU, NAME_JA, NAME_PL, NAME_AR)
```

We can search with World Bank database from right in R. You simply enter a search term, and it will give you back a list of file codes.

```{r}
library(wbstats)

wb_search("electricity")
```

```{r}
electricity_access <- wb_data("1.1_ACCESS.ELECTRICITY.TOT")
electricity_access
```

```{r}
world |> 
  left_join(electricity_access, by = c("iso_a3" = "iso3c"))
```

```{r}
world |> 
  left_join(electricity_access, by = c("iso_a3" = "iso3c")) |> 
  rename(electrification = `1.1_ACCESS.ELECTRICITY.TOT`) |> 
  ggplot(aes(fill=electrification)) +
  geom_sf() +
  coord_sf(crs = "+proj=robin") +
  theme_minimal()
```

## Layering data onto maps

TODO: Re-do this without maps trash

So far, we’ve basically just been using maps as a coloring book, but we often want to add more layers to our map. We can mix and match other things with our geom_sf() layers, just like any other kind of plot.

Let’s make a map of some cities with greater populations than Switzerland. The maps library will give you a list of cities. This isn’t the most accurate, but I’m trying to avoid some download.file() nonsense here.

library(maps) world.cities \|\> head()

We can filter the only the cities with populations of greater than 9 million.

big_cities \<- world.cities \|\> filter(pop \> 9000000)

big_cities \|\> head()

Now, to add these to our map, we need to convert it to something that works on a map. These have the latitude and longitude points, but we need them to be an sf object to be drawn correctly.

We can do this with the st_as_sf() function, which makes a map layer from points columns. We can see that we have a long and a lat column, so we can add these as coordinates.

We also need to set our coordinate reference system (crs), which in this case is the default Mercator projection, (4326). It will almost always be this if you see longitude and latitude as degrees.

lims(y=c(0, -10))

big_cities_sf \<- st_as_sf(big_cities, coords=c("long", "lat"), crs=4326) big_cities_sf

ggplot() + geom_sf(data = world) + geom_sf(data=big_cities_sf, color="red") + theme_void()

These can take aesthetics just like anything else. Here, I set the size of the dot depending on the size of the city.

ggplot() + geom_sf(data = world) + geom_sf(data=big_cities_sf, aes(size = pop), color="red") + theme_void()

library(ggrepel)

ggplot() + geom_sf(data = world) + geom_sf(data=big_cities_sf, aes(size = pop), color="red") + geom_label_repel( data = big_cities_sf, \# The data we want aes(label = name, geometry = geometry), \# set the geometry as the 'geometry' column. This is a very new feature! stat = "sf_coordinates" \# Turn it into a sf object ) + coord_sf(crs = "+proj=wag5") + theme_void()
