# Tidyverse 3: Data tips & tricks

```{r}
#| echo=FALSE, message=FALSE, warning=FALSE
library(tidyverse)
library(stringi)
library(knitr)
```

## Review: loading data, head(), tail()

This week is all about practice. I want to make sure you understand the basics before we start making charts, maps and websites.

Let's clean some data together.

1.  Make a new file
2.  Save your file
3.  Load the Tidyverse
4.  ... and let's get started. Here's a [link to a data set](https://opendata.swiss/de/dataset/lebendgeburten-nach-alter-der-mutter-geschlecht-des-kindes-und-kanton-1969-2023/resource/109ed5a9-9495-49be-ba7b-8e779aca5d3e):

You can get the download link, usually, by finding the button, right clicking, and hitting "Copy link address". This will be slightly different depending on your browser.

![You need to make sure you have a link to the file you want.](images/tidyverse_3/download_link_1.png)

1.  Download it into your project folder.

```{r}
#| eval=FALSE
download.file("https://dam-api.bfs.admin.ch/hub/api/dam/assets/32007752/master", "input_data/births.csv")
```

Note: On Windows, you need to make an adjustment. You need to add `mode = "wb"` to the `download.file()` function.

```{r}
#| eval=FALSE
download.file("https://dam-api.bfs.admin.ch/hub/api/dam/assets/32007752/master", "input_data/births.csv", mode = "wb") 
```

2.  Load this data set into your R session

```{r}
#| message=FALSE
births <- read_csv("input_data/births.csv")
```

3.  Take a look at the first 20 rows of the data set. Can you figure out what each column is?

```{r}
births |> head()
```

4.  Now look at the last 20 rows. What are some of the steps we're going to have to take?

```{r}
births |> tail()
```

Can we guess what every column is?

## Classwork: filter()

To review, the filter() function will sort out the data you want from the stuff you don't. For example, if you only wanted a dataset for boys in ZÃ¼rich in 1970, you could use the following code:

```{r}
births |>
  filter(YEAR == 1970) |> 
  filter(CANTON == 1) |>
  filter(SEX_CHILD == "M")
```

Please answer the following questions: Your answer should be a code block that uses the **filter()** function to find the answer.

1.  How many babies were born in Vaud (Canton number 22) in 2020?
2.  How many girls were born in Zurich (Canton number 1) to mothers aged 30-34 in 2019?
3.  Between 2000 and 2020, How many years did Ticino (Canton number 21) have fewer than 1400 boys born?
4.  How many boys and girls were born in Switzerland in 2015?

```{r}
#| eval=FALSE, echo=FALSE

births |>
  filter(CANTON == 22, YEAR == 2020, SEX_CHILD == "T", AGE_MOTHER == "_T")

births |>
  filter(CANTON == 1, YEAR == 2019, SEX_CHILD == "F", AGE_MOTHER == "Y30T34")

births |> 
  filter(
    CANTON == 21,
    SEX_CHILD == "M",
    AGE_MOTHER == "_T",
    OBS_VALUE < 1400,
    YEAR >= 2000,
    YEAR <= 2020
    )

births |> 
  filter(YEAR == 2015) |> 
  filter(CANTON == "CH") |> 
  filter(AGE_MOTHER == "_T") |> 
  filter(SEX_CHILD != "T")
```

## Classwork: select(), rename(), mutate()

Let's clean up the data set.

1.  TYPING IN ALL CAPS IS ANNOYING. Rename the columns to `year, canton, age_of_mother, sex_of_child, total_born`. You can use `rename()` or `colnames() <- c()`. It should look like this:

```{r echo=FALSE}
births |>
  rename(
    year = YEAR,
    canton = CANTON,
    age_of_mother = AGE_MOTHER,
    sex_of_child = SEX_CHILD,
    total_born = OBS_VALUE
  ) |>
  head(10)
```

2.  Let's say I don't care about gender. I want to know the total number of children born in each Canton each year to mothers of different ages. **Filter** only the total number of children born, and discard the boy and girl counts. It should look like this:

```{r}
#| echo=FALSE
births |>
    rename(
    year = YEAR,
    canton = CANTON,
    age_of_mother = AGE_MOTHER,
    sex_of_child = SEX_CHILD,
    total_born = OBS_VALUE
  ) |>
  filter(sex_of_child == "T") |> 
  head(10)
```

3.  Now that `sex_of_child` column is pretty useless, isn't it? Let's **select()** only the columns that we care about. It should look like this:

```{r}
#| echo=FALSE
births |>
    rename(
    year = YEAR,
    canton = CANTON,
    age_of_mother = AGE_MOTHER,
    sex_of_child = SEX_CHILD,
    total_born = OBS_VALUE
  ) |>
  filter(sex_of_child == "T") |> 
  select(-sex_of_child) |> 
  head(10)
```

4.  The `age_of_mother` column is a bit of a mess. Let's clean it up. A function called `str_sub()` can help us with this. Learn how it works by typing `?str_sub` into the console. You can also just experiment with it with a test string.

```{r, eval=FALSE}
str_sub("Maybe sub_str stands for submarine_string.", 1, 5)
str_sub("What about substitute_string?", 12, -2)
str_sub("Nah, maybe I'm overthinking it.", 16, 27)
```

```{r, echo=FALSE}
str_sub("Maybe sub stands for submarine.", 1, 5) |> print()
str_sub("What about substitute_string?", 12, -2) |> print()
str_sub("Nah, maybe I'm overthinking it.", 16, 27) |> print()
```

Now that you understand the function, you can use it to `mutate()` the `age_of_mother` column, and make two new columns, called `mother_age_from` and `mother_age_to`. It should look like this:

```{r}
#| echo=FALSE

births |>
    rename(
    year = YEAR,
    canton = CANTON,
    age_of_mother = AGE_MOTHER,
    sex_of_child = SEX_CHILD,
    total_born = OBS_VALUE
  ) |>
  filter(sex_of_child == "T") |> 
  select(-sex_of_child) |>
  mutate(
    mother_age_from = str_sub(age_of_mother, 2, 3),
    mother_age_to = str_sub(age_of_mother, 5, 6)
  )
```

5.  It looks like we have more filtering to do. the `canton` column also includes the total number of births in Switzerland. We don't want that. Let's use **filter()** to remove the rows where the `canton` column is equal to "CH". We also want to get rid of the rows where the age_of_mother is "\_T". It should look like this:

```{r}
#| echo=FALSE

births |>
    rename(
    year = YEAR,
    canton = CANTON,
    age_of_mother = AGE_MOTHER,
    sex_of_child = SEX_CHILD,
    total_born = OBS_VALUE
  ) |>
  filter(sex_of_child == "T") |> 
  select(-sex_of_child) |>
  mutate(
    mother_age_from = str_sub(age_of_mother, 2, 3),
    mother_age_to = str_sub(age_of_mother, 5, 6)
  ) |> 
  filter(canton != "CH") |> 
  filter(age_of_mother != "_T")
```

6.  But wait! Notice that the `mother_age_from` and `mother_age_to` columns are still characters. It's still just a string that looks like a number. We can convert them to integers with the `as.integer()` function. You should mutate over the column again, using the as.integer() function. It should look like this:

```{r}
#| echo=FALSE

births |>
    rename(
    year = YEAR,
    canton = CANTON,
    age_of_mother = AGE_MOTHER,
    sex_of_child = SEX_CHILD,
    total_born = OBS_VALUE
  ) |>
  filter(sex_of_child == "T") |>
  select(-sex_of_child) |>
  mutate(
    mother_age_from = str_sub(age_of_mother, 2, 3),
    mother_age_to = str_sub(age_of_mother, 5, 6)
  ) |>
  filter(canton != "CH") |>
  filter(age_of_mother != "_T") |>
  mutate(
    mother_age_from = as.integer(mother_age_from),
    mother_age_to = as.integer(mother_age_to)
  )
```

7.  Now we don't need the `age_of_mother` column anymore. Let's **select()** only the columns that we care about. It should look like this:

```{r}
#| echo=FALSE

births |>
    rename(
    year = YEAR,
    canton = CANTON,
    age_of_mother = AGE_MOTHER,
    sex_of_child = SEX_CHILD,
    total_born = OBS_VALUE
  ) |>
  filter(sex_of_child == "T") |> 
  select(-sex_of_child) |>
  mutate(
    mother_age_from = str_sub(age_of_mother, 2, 3),
    mother_age_to = str_sub(age_of_mother, 5, 6)
  ) |> 
  filter(canton != "CH") |> 
  filter(age_of_mother != "_T") |>
  mutate(
    mother_age_from = as.integer(mother_age_from),
    mother_age_to = as.integer(mother_age_to)
  ) |> 
  select(-age_of_mother)
```

8.  Now that we have a clean data set, let's save it to a variable, if you haven't been doing that already. This time, I think it's safe to overwrite the original value, so we simply use `->` to give it the same name as before. It should look like this:

**Before**

```{r eval=FALSE}
births |>
    rename(
    year = YEAR,
    ...
    ...
    ...
```

**After**

```{r eval=FALSE}
births <- births |>
    rename(
    year = YEAR,
    ...
    ...
    ...
```

```{r}
#| message=FALSE, echo=FALSE

births <- births |>
    rename(
    year = YEAR,
    canton = CANTON,
    age_of_mother = AGE_MOTHER,
    sex_of_child = SEX_CHILD,
    total_born = OBS_VALUE
  ) |>
  filter(sex_of_child == "T") |> 
  select(-sex_of_child) |>
  mutate(
    mother_age_from = str_sub(age_of_mother, 2, 3),
    mother_age_to = str_sub(age_of_mother, 5, 6)
  ) |> 
  filter(canton != "CH") |> 
  filter(age_of_mother != "_T") |>
  mutate(
    mother_age_from = as.integer(mother_age_from),
    mother_age_to = as.integer(mother_age_to)
  ) |> 
  select(-age_of_mother)
```

## Joining two datasets together with `left_join()`

There's one last annoying thing about this data set: the canton numbers. It would be really annoying to have to remember that Zurich is canton number 1, and so on. We can fix this by joining the data set with another data set that has the canton names.

We can find the canton names and numbers here:

https://www.bfs.admin.ch/asset/de/453856

Can you find the download link for the canton names and numbers? Use `download.file()` to download it into your project folder.

```{r}
#| eval=FALSE, echo=FALSE

download.file("https://www.atlas.bfs.admin.ch/core/projects/13.40/xshared/xlsx/134_131.xlsx", "input_data/canton_nums.xlsx")
```

Now import the data set into your R session. This one is especially messy, so I wrote some code to help you out. You can just copy and paste this code into your own file if you like.

```{r}
#| message = FALSE

library(readxl)

canton_names <- read_excel("input_data/canton_nums.xlsx")

canton_names <- canton_names |>
  select(1:2) |> # I select the first two columns because the rest are filled with junk.
  tail(-4) |> # I delete the first four rows, because the first four are metadata.
  head(26) # I select only the first 26 rows, because the rest are metadata.

# Now I rename the columns to something more useful.
colnames(canton_names) <- c("bfs_canton_number", "canton_name")

canton_names
```

Now the tricky part: joining. there's several different functions to join things, but the one we'll use is `left_join()`. This function takes two data sets, and joins them together into one. It's called "left join" because the data set on the left side of the function is the one that will be kept, and the data set on the right side will be joined to it.

Now we use `left_join()` to join the two data sets together. This function takes two arguments: the first is the data set you want to join, the second is `by=`, in which you put the names of the columns you want to join by. In this case, we want to join by the `canton_number` column in the `births` data set, and the `bfs_canton_number` column in the `canton_names` data set.

When we do this, it will match all the rows in the `births` data set with the corresponding row in the `canton_names` data set. If there's no match, it will put `NA` in the column, meaning that there is no data there.

```{r}
births |> 
  left_join(canton_names, by = c("canton" = "bfs_canton_number"))
```

When this looks good, save it to a variable.

```{r}
births <- births |> 
  left_join(canton_names, by = c("canton" = "bfs_canton_number"))
```

Make sure that the data types are the same! If they're not, you need to use a function to convert them using `mutate()`. Some functions that can do this are:

1.  `as.integer()` 0, 1, 2, 3
2.  `as.numeric()` 0.0, 1.0, 2.0, 3.0
3.  `as.logical()` FALSE, TRUE, TRUE, TRUE
4.  `as.character()` "0", "one", "2", "ZÃ¼rich"
5.  `as.roman()` I, II, III, IV

For example, here are two data sets that we want to join together. The first data set is a list of students, and the second data set is a list of grades. We want to join them together by the student number, to see which students got which grades. But it won't work!

```{r echo = FALSE}
students <- tibble(
  name = c("Urs", "Rebekka", "Dario", "JÃ¶rg", "Maude", "Daniel", "Mark"),
  student_number = c("101", "102", "103", "104", "105", "206", "207")
)

grades <- tibble(
  student_number = c(101, 102, 103, 104, 105, 106, 107, 108, 109, 110),
  grade = c(95, 85, 90, 100, 90, 90, 85, 70, 60, 55)
)
```

```{r}
#| label: tbl-label
#| tbl-cap: Two tables
#| tbl-subcap: ["mtcars", "Just cars"]
#| layout-ncol: 2
#| df-print: paged

# table on the left
students

# table on the right
grades
```

In the first table, the `student_number` column is a character, and in the second table, the `student_number` column is a number. In RStudio, you can see the data types when you print to the console. We need to convert one of them so that they match.

```{r}
students |> 
  mutate(student_number = as.numeric(student_number))
```

Now, we can join them together. Here, the column names are the same, so we can simplify the `by=` argument.

```{r}
students |> 
  mutate(student_number = as.numeric(student_number)) |> 
  left_join(grades, by = "student_number")
```

## Other types of join: `inner_join()`, `right_join()` and `full_join()`

In this example, you'll notice that there are some students who don't have grades. This is because they're not in the `grades` data set. Additionally, there were some grades that weren't associated with a student, because they're not in the `students` data set.

`left_join()` is called a "left join" because the data on the left (the first argument) will be kept, but the stuff on the right will be dropped if there isn't a match. However, there are some other kinds of joins that you can use.

1.  `inner_join()` will only keep the rows that have a match in both data sets. If there's no match, it will be dropped.

```{r}
students |> 
  mutate(student_number = as.numeric(student_number)) |> 
  inner_join(grades, by = "student_number")
```

2.  `right_join()` is the opposite of `left_join()`. It will keep the data on the right, and drop the data on the left if there isn't a match.

```{r}
students |> 
  mutate(student_number = as.numeric(student_number)) |> 
  right_join(grades, by = "student_number")
```

3.  `full_join()` will keep all the data, even if there isn't a match. If there isn't a match, it will put `NA` in the column.

```{r}
students |> 
  mutate(student_number = as.numeric(student_number)) |> 
  full_join(grades, by = "student_number")
```

I find myself using `left_join()` probably 95% of the time, but it's good to know that there are other options.

## Dealing with missing data with `replace_na()` and `drop_na()`

The new data we've created has some missing data. For example, some students don't have grades, and some grades don't have students. Missing data in R is represented by `NA`, and can create some problems for you. There are two ways to deal with this: you can either **replace** the missing data with something else, or you can **drop** the rows with missing data.

To replace missing data, you can use the `replace_na()` function. This function takes two arguments: the first is the data set you want to replace the missing data in, and the second is the value you want to replace the missing data with. For example, if you want to replace all the missing data in the `name` column with "NO NAME FOUND", you can use the following code:

```{r}
students |> 
  mutate(student_number = as.numeric(student_number)) |> 
  full_join(grades, by = "student_number") |> 
  mutate(name = replace_na(name, "NO NAME FOUND"))
```

Second, you can use the `drop_na()` function to drop the rows with missing data. This function takes one argument: the data set you want to drop the missing data from. For example, if you want to drop all the rows with missing data in the `grade` column, you can use the following code:

```{r}
students |> 
  mutate(student_number = as.numeric(student_number)) |> 
  full_join(grades, by = "student_number") |> 
  mutate(name = replace_na(name, "NO NAME FOUND")) |> 
  drop_na(grade)
```

## Review together: group_by(), summarize()

Let's go back to our cleaned birth data set and do some analysis.

For example, suppose we want to know how many children were born each year to women over 45 years old. First, we need to **filter()** only the rows where the `mother_age_to` column is greater than 45.

```{r}
births |>
  filter(mother_age_to > 45)
```

Now let's think. We want to know how many children were born each year. We need to **group_by()** the `year` column.

```{r}
births |>
  filter(mother_age_to > 45) |>
  group_by(year)
```

Now, we want to **summarize()** the data. We want to know the total number of children born each year. We can use the `sum()` function to do this.

```{r}
births |>
  filter(mother_age_to > 45) |>
  group_by(year) |>
  summarize(total_born = sum(total_born))
```

## Homework: Answering questions with group_by() and summarize()

Finally, use this data to answer the following questions:

1.  How many teenage births were there in ZÃ¼rich between 2000 and 2020?
2.  What is the approximate age of oldest woman to ever give birth in each canton?
3.  How many children were born in Zurich, Bern and Geneva in 2019?
4.  How many children were born in each Canton in 1980?
5.  In each canton, what was the most common age range for mothers to give birth in 1970, 1990, and 2010?

Please email me the code you used to find the answers in a document named `week_3_homework_(your_name).R` by Tuesday, March 12th.

## Bonus questions

For people with some experience working with data, these are a bit easy. If you'd like more practice, here are some bonus questions:

These aren't part of the homework, but might be a good challenge for you.

6.  Between 2010 and 2020, what were the average number of children born each year in each canton?
7.  Building off this, which years had an above average birth rate for that decade?
8.  Here's some data about the number of deaths in each canton. <https://opendata.swiss/de/dataset/todesfalle-nach-funf-jahres-altersgruppe-geschlecht-und-kanton-1969-2023> Can you download and clean this one?
9.  Simplify the births data into just number of births by year. Then **join()** this data with the deaths data. What was the total population change in ZÃ¼rich in 2000? (Excluding immigration and emmigration)
10. Make a plot of the total births and deaths in Basel-Stadt between 1970 and 2000.

```{r eval=FALSE}
# 1. How many teenage births were there in ZÃ¼rich between 2000 and 2020?
births |> 
  filter(mother_age_to < 20, canton_name == "ZÃ¼rich", year >= 2000, year <= 2020) |>
  summarize(total_born = sum(total_born))

# 2. What is the approximate age of oldest woman to ever give birth in each canton?
births |> 
  group_by(canton_name) |> 
  filter(total_born > 0) |> 
  summarize(oldest_mother = max(mother_age_to))

# 3. How many children were born in Zurich, Bern and Geneva in 2019?
births |> 
  filter(year == 2019) |> 
  group_by(canton_name) |>
  summarize(total_born = sum(total_born)) |> 
  filter(canton_name %in% c("ZÃ¼rich", "Bern", "Genf"))

# 4. How many children were born in each Canton in 1980?
births |>
  filter(year == 1980) |>
  group_by(canton_name) |>
  summarize(total_born = sum(total_born))

# 5. In each canton, what was the most common age range for mothers to give birth in 1970, 1990, and 2010?
births |> 
  filter(year %in% c(1970, 1990, 2010)) |>
  group_by(canton_name, year) |> 
  filter(total_born == max(total_born)) |> 
  select(year, canton_name, mother_age_from, mother_age_to) |> 
  arrange(canton_name, year)

# 6.  Between 2010 and 2020, what were the average number of children born each year in each canton?

births |>
  filter(year >= 2010, year <= 2020) |>
  group_by(canton_name, year) |>
  summarise(total_births_per_year = sum(total_born)) |>
  summarize(avg_born = mean(total_births_per_year))

# 7.  Building off this, which years had an above average birth rate for that decade?

births |> 
  filter(year >= 2010, year <= 2020) |>
  group_by(canton_name, year) |>
  summarise(total_births_per_year = sum(total_born)) |>
  summarize(year = year, total_births_per_year = total_births_per_year, avg_born = mean(total_births_per_year)) |> 
  mutate(above_average = total_births_per_year > avg_born) |> 
  filter(above_average) |> 
  select(canton_name, year)

# 8.  Here's some data about the number of deaths in each canton. <https://opendata.swiss/de/dataset/todesfalle-nach-funf-jahres-altersgruppe-geschlecht-und-kanton-1969-2023> Can you download and clean this one?

download.file("https://dam-api.bfs.admin.ch/hub/api/dam/assets/32007751/master", "input_data/deaths.csv")

deaths <- read_csv("input_data/deaths.csv")
colnames(deaths) <- c("year", "canton", "age", "sex", "total_deaths")

deaths <- deaths |> 
  filter(age == "_T") |> 
  filter(canton != "CH") |> 
  filter(sex == "T") |> 
  select(-age, -sex)

deaths

# 9.  Simplify the births data into just number of births by year. Then join this data with the deaths data. What was the total population change in each canton?

births <- births |> 
  group_by(year, canton_number, canton_name) |> 
  summarize(total_births = sum(total_born))

deaths <- deaths |>
  rename(canton_number = canton)

birth_and_deaths <- births |> 
  left_join(deaths)

birth_and_deaths <- birth_and_deaths |> 
  mutate(total_population_change = total_births - total_deaths)

birth_and_deaths |> 
  filter(year == 2000) |>
  filter(canton_name == "ZÃ¼rich") |>
  select(total_population_change)

# 10. Make a plot of the total births and deaths in Basel-Stadt between 1970 and 2000.

birth_and_deaths |> 
  filter(canton_name == "Basel-Stadt") |>
  select(year, canton_name, total_births, total_deaths) |> 
  pivot_longer(cols = c(total_births, total_deaths), names_to = "event", values_to = "total") |> 
  ggplot(aes(x = year, y = total, color = event)) +
  geom_line()
```

```{r eval=FALSE, echo=FALSE, results='hide'}
births |> 
  saveRDS("output_data/births.rds")
```
